#!/bin/bash

intml=../../intml
red=$(tput setaf 1)
grn=$(tput setaf 2)
rst=$(tput sgr0)

expect () {
    result=$(echo "$1" | $intml -p -)
    if [[ "$result" == "$2" ]]; then
        echo "${grn}pass:${rst} $1  ==>  $2"
    else
        echo "${red}fail:${rst} $1  ==>"
        echo "  expected: $2"
        echo "    actual: $result"
    fi
}

# check we order type tuples correctly
expect "type x = a * b * c" "((type x (a * b * c)))"
expect "type x = (a * b) * c" "((type x ((a * b) * c)))"
expect "type x = a * (b * c)" "((type x (a * (b * c))))"


# function types associate to the right
expect "type t = a -> b -> c" "((type t (a -> (b -> c))))"

# unit parens can be separated
expect "let x = (  )" "((let (pvar x) (unit ())))"

expect "let x = [1]" "((let (pvar x) (list (int 1))))"
expect "let x = [|1|]" "((let (pvar x) (vector (int 1))))"

expect "let rec f x = x" "((recfunc f ((param x)) (var x)))"

expect "let x = match xs with x::_ -> 1 | _ -> 2" \
    "((let (pvar x) (match (var xs) ((pcons (pvar x) (pdiscard)) (int 1) (pdiscard) (int 2)))))"
# same thing but with leading |
expect "let x = match xs with | x::_ -> 1 | _ -> 2" \
    "((let (pvar x) (match (var xs) ((pcons (pvar x) (pdiscard)) (int 1) (pdiscard) (int 2)))))"

# tuples
expect "let x = 1, 2, 3" "((let (pvar x) (tuple (int 1) (int 2) (int 3))))"
expect "let x = a, b, c" "((let (pvar x) (tuple (var a) (var b) (var c))))"
expect "let x = (a, b), c" "((let (pvar x) (tuple (tuple (var a) (var b)) (var c))))"
expect "let x = a, (b, c)" "((let (pvar x) (tuple (var a) (tuple (var b) (var c)))))"

expect "let x = 1 + 2, 3 + 4, 5 + 6" \
    "((let (pvar x) (tuple (+ (int 1) (int 2)) (+ (int 3) (int 4)) (+ (int 5) (int 6)))))"

#tuple pattersn
expect "let a, b, c = x" "((let (ptuple (pvar a) (pvar b) (pvar c)) (var x)))"
expect "let (a, b), c = x" "((let (ptuple (ptuple (pvar a) (pvar b)) (pvar c)) (var x)))"
expect "let a, (b, c) = x" "((let (ptuple (pvar a) (ptuple (pvar b) (pvar c))) (var x)))"

# function application associates to the left
expect "let x = f a b" "((let (pvar x) (apply (apply (var f) (var a)) (var b))))"
# function application has higher recendence than + for example
expect "let x = f a + b" "((let (pvar x) (+ (apply (var f) (var a)) (var b))))"
expect "let x = f + a b" "((let (pvar x) (+ (var f) (apply (var a) (var b)))))"

