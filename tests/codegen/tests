#!/bin/bash

exitcode=0

expect () {
    echo expect $1 = $2
    $1
    result=$?
    if [[ $result == $2 ]]; then
        echo pass
    else
        echo FAIL: $1 = $result
        exitcode=$((1 + $exitcode))
    fi
}

expect ./simple0 42
expect ./simple1 3
if [[ ! "armv7l" == "$(uname -m)" ]]; then
    expect ./simple1.5 1
fi
expect ./simple2 10
expect ./simple4 11
expect ./simple5 30
expect ./complex0 210
expect ./lists0 3
expect ./lists1 4
expect ./lists2 3

LD=ld
LDFLAGS=
LDLIBS=-lc
if [[ $(uname) == "Darwin" ]]; then
    LDFLAGS="$LDFLAGS -macosx_version_min $(sw_vers -productVersion)"
fi

expect2 () {
    code="$1"
    otmp=$(mktemp)
    echo "$code" | ../../intml - | as -o $otmp --
    ${LD} ${LDFLAGS} -o a.out $otmp ${LDLIBS}
    ./a.out
    result=$?
    if [[ $result == $2 ]]; then
        echo pass
    else
        echo "FAIL: '$1'"
        echo "  expected: $2"
        echo "  actual:   $result"
        exitcode=$((1 + $exitcode))
    fi
    rm -f a.out $otmp
}

expect2 "
let main () =
  let snd xs =
    let _ :: x :: _ = xs in x
  in snd [ 4; 3; 2; 1 ]
" 3

expect2 "
let sum =
  let rec go acc xs =
    let hd::tail = xs in
    if hd then
      go (hd + acc) tail
    else
      acc
  in go 0
let main () = sum [ 4; 3; 2; 1; 0; 0 ]
" 10

expect2 "let main () =
  match 10 with
  | y -> y * y
" 100

expect2 "let main () =
match [1] with
| x :: _ -> 51
| _ -> 52
" 51

expect2 "let main () =
match ([] : int list) with
| x :: _ -> 51
| _ -> 52
" 52

expect2 "let main () =
match [1] with
| _ :: x :: _ -> 50
| x :: _ -> 51
| _ -> 52
" 51

expect2 "
let sum =
  let rec go acc xs =
    match xs with
    | hd :: tail -> go (hd + acc) tail
    | _ -> acc
  in go 0
let main () = sum [ 4; 3; 2; 1; 0 ]
" 10

expect2 "let main () = let x, y = 1, 2 in x + y" 3
expect2 "let main () = let x, y, z = 2, 3, 5 in x * y * z" 30

expect2 "let main () =
let (w,x) :: (y,z) :: _ = [ (2, 3); (5, 7); (11,13) ]
in w * x * y * z
" 210

expect2 "type dice = Tails | Heads
let isheads x = if x = Heads then 1 else 0
let main () = isheads Heads" 1

expect2 "type dice = Tails | Heads
let isheads x = if x = Heads then 1 else 0
let main () = isheads Tails" 0

expect2 "type lisp_val = String of string | Int of int | Empty
let is_empty x = if x = Empty then 1 else 0
let main () = is_empty (Int 5)" 0

expect2 "type lisp_val = String of string | Int of int | Empty
let is_empty x = if x = Empty then 1 else 0
let main () = is_empty Empty" 1

expect2 'type lisp_val = String of string | Int of int | Empty
let is_empty x = if x = Empty then 1 else 0
let main () = is_empty (String "hi")' 0

expect2 "let main () = (1,1) = (1,1)" 1
expect2 "let main () = (1,2) = (1,2)" 1
expect2 "let main () = (1,1) = (1,2)" 0
expect2 "let main () = (0,1) = (1,1)" 0

expect2 "let main () = [1] = [1]" 1
expect2 "let main () = [0] = [1]" 0
expect2 "let main () = [0;1] = [0;1]" 1
expect2 "let main () = [0;1] = [1;0]" 1

# Exit with the number of failing tests
exit $exitcode

